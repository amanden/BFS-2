// Time Complexity : O(n) where n is the number of nodes in the tree
// Space Complexity : O(h) where h is the height of the tree
// Did this code successfully run on Leetcode : Yes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int depthX = -1, depthY = -1;
    TreeNode parentX = null, parentY = null;
    
    public boolean isCousins(TreeNode root, int x, int y) {
        helper(root, x, y, 0, null);
        if(depthX == depthY && parentX != parentY) return true;
        else return false;
    }
    public void helper(TreeNode root, int x, int y, int level,TreeNode parent){
        if(root == null) return ;
        if(root.val == x ){
            depthX = level;
            parentX = parent;
        }if(root.val == y){
            depthY = level;
            parentY = parent;
        }
        if(depthX != -1 && depthY != -1) return;
        helper(root.left, x, y, level+1, root);
        helper(root.right, x, y, level+1, root);
    }
}
